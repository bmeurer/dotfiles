# .bashrc - Interactive bash configuration file
#
# Copyright 2001-2014 Benedikt Meurer
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# If not running interactively, don't do anything
[[ -z "${PS1}" ]] && return

# Source system-wide definitions
if [[ -r /etc/bashrc ]]; then
	. /etc/bashrc
elif [[ -r /etc/bash.bashrc ]]; then
	. /etc/bash.bashrc
fi

# Shortcut to the dotfiles repository
DOTFILES="${HOME}/.dotfiles"

# Set a fancy prompt and xterm title
source "${DOTFILES}/sh/git-prompt.sh"
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[35m\]$(__git_ps1)\[\033[00m\]$ '
case "${TERM}" in
xterm*|rxvt*)
	PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
	;;
*)
	;;
esac

# Make bash check its window size after a process completes
shopt -s checkwinsize

# repeat N CMD runs CMD N times.
function repeat() {
	number=$1
	shift
	for n in $(seq $number); do
		$@ || return $?
	done
}

# History settings
HISTCONTROL="ignoredups:erasedups"	# no duplicate entries
HISTSIZE=100000				# big big history
HISTFILESIZE="${HISTSIZE}"		# big big history
shopt -s histappend			# append to history, don't overwrite i
export HISTCONTROL HISTSIZE HISTFILESIZE

# Default grep settings.
GREP_OPTIONS="--color=auto"
export GREP_OPTIONS

# Set editor to vim
EDITOR=vim
export EDITOR

# Default generator for gyp.
GYP_GENERATORS=ninja
export GYP_GENERATORS

# Default settings for gyp.
GYP_DEFINES="v8_optimized_debug=1"
export GYP_DEFINES

# goma support.
if [[ -d "${HOME}/Applications/goma" ]]; then
	GYP_DEFINES="${GYP_DEFINES} use_goma=1 gomadir=\"${HOME}/Applications/goma\""
	export GYP_DEFINES
fi

# MacPorts related paths
if [[ -d /opt/local ]]; then
	MANPATH="/opt/local/share/man:${MANPATH}"
	PATH="/opt/local/bin:/opt/local/sbin:${PATH}"
	PKG_CONFIG_PATH="/opt/local/lib/pkgconfig:${PKG_CONFIG_PATH}"
	export MANPATH PKG_CONFIG_PATH
fi

# depot_tools must be first in $PATH
if [[ -d "${HOME}/Applications/depot_tools" ]]; then
	PATH="${HOME}/Applications/depot_tools:${PATH}"
fi

# Enable various useful bash aliases
. "${DOTFILES}/bash/bash.aliases"

# Enable programmable completion features
if [[ -r /opt/local/etc/bash_completion ]]; then
	. /opt/local/etc/bash_completion
elif [[ -r /etc/bash_completion ]]; then
	. /etc/bash_completion
fi

# Setup chromium development sandbox
if [[ -x "/usr/local/sbin/chrome-devel-sandbox" ]]; then
	CHROME_DEVEL_SANDBOX="/usr/local/sbin/chrome-devel-sandbox"
	export CHROME_DEVEL_SANDBOX
fi

# Setup Android NDK
if [[ -d "${HOME}/Applications/android-ndk-current" ]]; then
	ANDROID_NDK_ROOT="${HOME}/Applications/android-ndk-current"
	export ANDROID_NDK_ROOT
fi

# Set MAKEFLAGS based on processor count
if [[ -f /proc/cpuinfo ]]; then
	ncpu="$(grep -c ^processor /proc/cpuinfo)"
	if [[ ${ncpu} -eq 0 ]]; then
		ncpu=1
	fi
else
	ncpu="$(sysctl hw.ncpu | head -1 | grep -o '[0-9]*$')"
fi
if [[ -n "${ncpu}" ]]; then
	MAKEFLAGS="${MAKEFLAGS} -j${ncpu}"
	export MAKEFLAGS
fi
unset ncpu

# Set PATH so it includes user's private bin
PATH="${HOME}/bin:${PATH}"
