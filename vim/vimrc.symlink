" .vimrc - VI Improved configuration file
"
" Copyright 2001-2013 Benedikt Meurer
"
" Licensed under the Apache License, Version 2.0 (the "License");
" you may not use this file except in compliance with the License.
" You may obtain a copy of the License at
"
"     http://www.apache.org/licenses/LICENSE-2.0
"
" Unless required by applicable law or agreed to in writing, software
" distributed under the License is distributed on an "AS IS" BASIS,
" WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
" See the License for the specific language governing permissions and
" limitations under the License.
"

"--{{{ Pathogen
call pathogen#infect()
call pathogen#helptags()
"--}}}

"--{{{ GNU Global
let GtagsCscope_Auto_Load = 1
let GtagsCscope_Auto_Map = 1 " Use the default key/mouse mapping
let GtagsCscope_Quiet = 1
set cscopetag " Use 'vim -t ', ':tag' and '<C-]>'
"--}}}

"--{{{ LustyJuggler

" Display the key with the name of the buffer
let g:LustyJugglerShowKeys = 'a'

" Use Alt-Tab mode
let g:LustyJugglerAltTabMode = 1

" Bind LustyJuggler to Q (we don't want ex mode anyways)
noremap <silent> Q :LustyJuggler<CR>

"--}}}

"--{{{ Shortcut mappings

" Change map leader from \ to ,
let mapleader=","

" CommandT plugin
nmap <silent> <c-c> :CommandTFlush<CR>:CommandT<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <Leader>ev :e $MYVIMRC<CR>
nmap <silent> <Leader>sv :so $MYVIMRC<CR>

" Clear highlighted searches
nmap <silent> <Leader>/ :nohlsearch<CR>

nmap <silent> <Leader>g :noautocmd execute "lvimgrep /" . expand("<cword>") . "/j **" <Bar> lw<CR>

"--}}}

"--{{{ EasyMotion
" See https://github.com/Lokaltog/vim-easymotion for details.

" 1-character search motion.
nmap s <Plug>(easymotion-s)

" 2-character search motion.
nmap t <Plug>(easymotion-s2)

" n-character search motion.
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" Configure EasyMotion to avoid repetitive use of the h j k and l keys.
map <Leader>h <Plug>(easymotion-linebackward)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" Make EasyMotion work similarly to Vim's smartcase option for global
" searches.
let g:EasyMotion_smartcase = 1

" Type Space key to jump to first match.
let g:EasyMotion_space_jump_first = 1

"--}}}

"--{{{ Statusline

" Always show the status line
set laststatus=2

" Use solarized theme
let g:airline_theme = 'solarized'

"--}}}

"--{{{ Trailing whitespace

" Delete trailing white space on save, useful for C/C++ ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.c :call DeleteTrailingWS()
autocmd BufWrite *.cc :call DeleteTrailingWS()
autocmd BufWrite *.h :call DeleteTrailingWS()

" Highlight trailing whitespace
match ErrorMsg '\s\+$'

"--}}}

" Sync if idle for atleast one minute or 250 chars entered
set updatetime=60000
set updatecount=250

set wildignore=*.a,*.cma,*.cmi,*.cmo,*.cmx,*.cmxa,*.cmxs,*.o
set wildmode=longest:list

set hidden " Hide buffers instead of closing them
set autoindent " always set autoindent on
set copyindent " copy the previous indentation on autoindenting
set showmatch " show matching parenthesis
set nobackup
set nowritebackup
set noswapfile
set hlsearch
set nonumber
set shiftwidth=8
set tabstop=8
set nowrapscan
set noignorecase
set smartcase " ignore case if search pattern is all lowercase,
              " case-senstive otherwise
set mousehide
set title " change the terminal's title
set history=10000 " remember more commands and search history
set undolevels=10000 " use many muchos levels of undo
set formatoptions=croql
set autowrite
set autowriteall
syntax on

" hilight matching parentesis
set sm

" display date-time in rulter
set ruler
"set rulerformat=%55(%{strftime('%a\ %b\ %e\ %I:%M\ %p')}\ %5l,%-6(%c%V%)\ %P%)

" colors
colorscheme solarized
set background=dark

" folding
set fen
set fdm=marker

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

if has("autocmd")
	autocmd BufRead *.d set ts=2 sw=2 et cindent
	autocmd BufRead *.cs set ts=2 sw=2 et cindent ai
	autocmd BufRead *.rb set ts=2 sw=2 et ai
	autocmd BufRead *.py set ts=2 sw=2 et ai
	autocmd BufRead *.scm set ts=2 sw=2 et ai cindent
	autocmd BufRead *.h set ts=2 sw=2 et cindent
	autocmd BufRead *.h.in set ts=2 sw=2 et cindent
	autocmd BufRead *.c set ts=2 sw=2 et cindent
	autocmd BufRead *.gob set ts=2 sw=2 et cindent syntax=c
	autocmd BufRead *.hh set ts=2 sw=2 et cindent
	autocmd BufRead *.hpp set ts=2 sw=2 et cindent
	autocmd BufRead *.cc set ts=2 sw=2 et cindent
	autocmd BufRead *.cpp set ts=2 sw=2 et cindent
	autocmd BufRead *.java set ts=2 sw=2 et cindent encoding=utf-8
	autocmd BufRead *.m4 set ts=2 sw=2 et
	autocmd BufRead *.ac set ts=2 sw=2 et
	autocmd BufRead *.tex set ts=2 sw=2 et
	autocmd BufRead *.html set ts=2 sw=2 et
	autocmd BufRead *.xml set ts=2 sw=2 et encoding=utf-8
	autocmd BufRead *.po set encoding=UTF-8
	autocmd BufRead *.properties set encoding=iso8859-1
	autocmd BufRead *.ml set syntax=ocaml ts=2 sw=2 et
	autocmd BufRead *.mli set syntax=ocaml ts=2 sw=2 et
	autocmd BufRead *.mlp set syntax=ocaml ts=2 sw=2 et
	autocmd BufRead *.ml.ab set syntax=ocaml ts=2 sw=2 et
endif

" lower the VIM update timer
set updatetime=1000

" OMLet
let omlet_indent_let=0

" Get autoread to work for non-ui VIM sessions
set autoread
augroup checktime
    au!
    if !has("gui_running")
        " silent! necessary otherwise throws errors when using command
        " line window.
        autocmd BufEnter        * silent! checktime
        autocmd BufWinEnter     * silent! checktime
        autocmd CursorHold      * silent! checktime
        autocmd CursorHoldI     * silent! checktime
        " these two _may_ slow things down. Remove if they do.
        autocmd CursorMoved     * silent! checktime
        autocmd CursorMovedI    * silent! checktime
    endif
augroup END
