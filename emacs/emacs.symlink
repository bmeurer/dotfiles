;; .emacs - Emacs configuration file
;;
;; Copyright (c) 2003-2013 Benedikt Meurer
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;


;;
;; Custom variables
;;
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-PDF-mode t)
 '(column-number-mode t)
 '(custom-safe-themes (quote ("8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(default-frame-alist (quote ((tool-bar-lines . 0) (menu-bar-lines . 1) (right-fringe) (left-fringe) (width . 80) (height . 50))))
 '(save-place t nil (saveplace))
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(tool-bar-mode nil)
 '(transient-mark-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;
;; Common Lisp
;;
(require 'cl)

;;
;; Additional load paths
;;
(labels ((add-path (p)
                   (add-to-list 'load-path
                                (concat "~/.emacs.d/" p))))
  (add-path "lisp"))

;;
;; Package manager setup
;;
(require 'package)
; Package repositories
(dolist (source '(("marmalade" .  "http://marmalade-repo.org/packages/")
		  ("elpa" . "http://tromey.com/elpa/")
		  ("melpa" . "http://melpa.milkbox.net/packages/")
		  ))
  (add-to-list 'package-archives source t))
(package-initialize)
; Required packages (checked upon each start)
(when (not package-archive-contents)
  (package-refresh-contents))
(defvar bmeurer/packages
  '(auto-complete
    auto-complete-clang
    autopair
    cmake-mode
    magit
    solarized-theme
    tuareg
    yasnippet))
(dolist (p bmeurer/packages)
  (when (not (package-installed-p p))
    (package-install p)))

;;
;; Solarized theme
;;
(load-theme 'solarized-dark)

;;
;; Autopair mode
;;
(require 'autopair)
(setq autopair-autowrap t)
(add-hook 'c-mode-common-hook ;; enable autopair in C/C++
	  #'(lambda () (autopair-mode)))
(add-hook 'c-mode-common-hook ;; disable pairing of { in C/C++ comments
	  #'(lambda ()
	      (push ?{
		    (getf autopair-dont-pair :comment))))
(add-hook 'c++-mode-hook ;; enable pairing of < > in C++
          #'(lambda ()
              (push '(?< . ?>)
                    (getf autopair-extra-pairs :code))))

;;
;; yasnippet
;; (should be loaded before autocomplete so that they can work together)
;;
(require 'yasnippet)
(yas-global-mode 1)

;;
;; Autocomplete mode
;; (should be loaded after yasnippet so that they can work together)
;;
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
;;; set the trigger key so that it can work together with yasnippet on tab key,
;;; if the word exists in yasnippet, pressing tab will cause yasnippet to
;;; activate, otherwise, auto-complete will
;(ac-set-trigger-key "TAB")
;(ac-set-trigger-key "<tab>")
(require 'auto-complete-clang)
(define-key c++-mode-map (kbd "TAB") 'ac-complete-clang)
(define-key c++-mode-map (kbd "<tab>") 'ac-complete-clang)

;;
;; OS X Setup
;;
(setq mac-command-modifier 'meta)

;; Keybindings as suggested by "Effective Emacs"
;(global-set-key "\C-w" 'backward-kill-word) ; Ctrl+D to kill word
;(global-set-key "\C-x\C-k" 'kill-region)
;(global-set-key "\C-c\C-k" 'kill-region)
(global-set-key "\M-s" 'isearch-forward-regexp)
(global-set-key "\M-r" 'isearch-backward-regexp)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-`" 'other-frame)

;; avoid the annoying startup message.
(setq inhibit-startup-message t)

;; enable save history mode
(savehist-mode 1)

;; save place in files
(require 'saveplace)
(setq-default save-place t)

;; add CMake mode
(setq auto-mode-alist
      (append
       '(("CMakeLists\\.txt\\'" . cmake-mode)
         ("\\.cmake\\'" . cmake-mode))
       auto-mode-alist))
(autoload 'cmake-mode "cmake-mode" t)

;; Do not indent using tabs by default
(setq-default indent-tabs-mode nil)

;; Google C/C++ Style
(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)

;; Tuareg-Mode setup
(setq auto-mode-alist
  (cons '("\\.ml\\w?" . tuareg-mode) auto-mode-alist))
(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code." t)
(autoload 'camldebug "cameldeb" "Run the Caml debugger." t)

;; AUCTeX mode setup
;(require 'tex-site)
;(add-hook 'LaTeX-mode-hook
;          'TeX-source-correlate-mode)
;(setq TeX-source-correlate-method 'synctex)
;(add-hook 'LaTeX-mode-hook
;          (lambda ()
;            (add-to-list 'TeX-expand-list
;                 '("%q" skim-make-url))))
;(defun skim-make-url () (concat
;       (TeX-current-line)
;       " "
;       (expand-file-name (funcall file (TeX-output-extension) t)
;           (file-name-directory (TeX-master-file)))
;       " "
;       (buffer-file-name)))
;(setq TeX-view-program-list '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %q")))
;(setq TeX-view-program-selection '((output-pdf "Skim")))

